#+TITLE: The NEEDED example implemenation hints
#+TAGS: 
#+CATAGORIES: Code-Example
#+WEIGHT: 30
This is the skeleton model on how to implement binary library configuration.

External C, and C++ libraries are available in .so, dll and .mylib file formats.
Using CFFI a Common Lisp interface system is written to allow the use of the functions and structures from the foreign library.

The location of the .so, .dll or .mylib file on the users computer could be guessed,
but as a last resort give the user the ability to specifiy that location.
-----
The example model:

Assume NEEDED is replace by the name of the library.

* Purpose

You need to offer the user the ability to override how to find the external library,
in the case of external library version updates.

* What the interface library author should do

There are three parts:
- the config system definition
- the config system implementation
- where your inferface code expects to load the library.
** Define the config  secondary system
#+BEGIN_SRC lisp
  (defsystem cl-NEEDED/config
    (depends-on "CFFI")
#+END_SRC
** Create the config packaage implementation
To allow your cl-NEEDED system to be configured a secondary system called cl-NEEDED/config should be simliar to this:
#+BEGIN_SRC lisp
  (defpackage :cl-NEEDED/config
    (:use
      :common-lisp
      :cffi)
    (:export
      #:define-libNEEDED-path))

   (in-package :cl-NEEDED/config)
   ;; Define flag to assume we need to use our default search logic.
   (defvar *libNEEDED-override* nil)

   (defmacro define-libNEEDED-path (path)
     `(progn
	;; Set your known path for libNEEDED for cffi
	(cffi:define-foreign-library libNEEDED (t ,path))
	;; Flag to just use the defined path
	(setq *libNEEDED-override* t)))
#+END_SRC

** Where your  interface  expects to load the library

The override system defines a CFFI library, libNEEDED with a pass with assumption that a (cffi:load-library libNEEDED).
This code assumes that the library location guessing code will result in a call to of (cffi:define-foreign-library libNEEED (t path-you-checked)).


This code show a macro definition that does that:
#+BEGIN_SRC lisp
  (unless cl-NEEDED/config::*libNEEDED-override*
    ;; Your legacy  path finding code goes here.
    ;; You are trying to find the libNEEDED path for cffi
  )
  (cffi:load-library libNEEDED)
#+END_SRC
-----
*  Simple Use Case: a  config-NEEDED package.

The most simple example is for a programmer write her own configuration for NEEDED,
by adding the correct path in main/preload function.
Now as long as her use of NEEDED occurs after config-NEEDED is loaded, NEEDED will use her configuration.

** System definition

This is an asd for the system to configure the cl-NEEDED

#+BEGIN_SRC lisp
(defsystem "config-NEEDED"
  :description "supply binding for NEEDED .dl "
  :author "NEEDED@example.com"
  :license "NEEDED LICENSE"
  :depends-on ("cffi" "cl-NEEDED/config")
  :components ((:file "main")))
#+END_SRC

** System implemenation

The config-NEEDED/main.lisp is where we call define-NEEDED-lib with the hardcoded path to the correct library file.

#+BEGIN_SRC lisp
   (defpackage #:config-NEEDED/main
    (:use
     #:cl
     #:cl-NEEDED/config)
    (:export
     #:do-configure))

  (in-package #:config-NEEDED/main)

  (defun do-configure ()
    ;; Your will need to change this for your own case.
    (define-NEEDED-lib "c:/my/path/to/NEEDED.dll"))

  (do-configure)
#+END_SRC
* Other Use Case
To Be Done.

